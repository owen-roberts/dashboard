{"version":3,"sources":["components/home/background.tsx","components/home/clock.tsx","components/weather/current.tsx","components/weather/weatherIcon.tsx","components/weather/day.tsx","components/weather/forecast.tsx","components/weather/dayData.tsx","components/weather/index.tsx","App.tsx","index.tsx"],"names":["background","props","componentDidMount","setInterval","setState","image","getImageForHour","Date","getHours","intervalSeconds","state","hour","className","this","Component","Clock","datetime","updateInterval","render","date","format","currentWeather","currentTemp","feelsLikeTemp","weatherIcon","url","iconCode","src","alt","forecastDay","showTemp","style","display","temp","icon","name","dayNames","forecastWeather","showTemps","showForecastTemps","hideTemps","onPointerEnter","onPointerLeave","days","map","day","index","getDay","Day","process","REACT_APP_LOCATION_LAT","REACT_APP_LOCATION_LON","REACT_APP_WEATHER_API_KEY","requestUrl","Weather","a","fetch","then","response","json","roundToOnePlace","current","feelsLike","feels_like","forecast","parseForecast","loading","daily","slice","numDaysToForecast","DayData","dt","weather","value","Math","round","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06795ff4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../../styles/Backgrounds.css';\r\n\r\ninterface IProps { }\r\ninterface IState {\r\n    image: string\r\n}\r\n\r\nconst intervalSeconds = 60;\r\n\r\nexport class background extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { image: this.getImageForHour(new Date().getHours()) };\r\n    }\r\n\r\n    getImageForHour(hour: number) {\r\n        switch (true) {\r\n            case (hour >= 23 && hour <= 4):\r\n                return 'late-night';\r\n            case (hour >= 22):\r\n                return 'mid-night';\r\n            case (hour >= 21):\r\n                return 'early-night';\r\n            case (hour >= 19):\r\n                return 'late-evening';\r\n            case (hour >= 16):\r\n                return 'mid-evening';\r\n            case (hour >= 15):\r\n                return 'early-evening';\r\n            case (hour >= 13):\r\n                return 'late-afternoon';\r\n            case (hour >= 12):\r\n                return 'mid-afternoon';\r\n            case (hour >= 10):\r\n                return 'early-afternoon';\r\n            case (hour >= 7):\r\n                return 'late-morning';\r\n            case (hour >= 5):\r\n                return 'mid-morning';\r\n            default:\r\n                return 'early-morning';\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => setInterval(() => {\r\n        this.setState({ image: this.getImageForHour(new Date().getHours()) })\r\n    }, intervalSeconds * 1000);\r\n\r\n    render() {\r\n        return (\r\n            <div className={`background ${this.state.image}`}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default background\r\n","import React, { Component } from 'react'\r\nimport Moment from 'react-moment';\r\n\r\ninterface IProps { }\r\ninterface IState {\r\n    datetime: Date\r\n}\r\n\r\nconst updateInterval = 1;\r\n\r\nexport default class Clock extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            datetime: new Date()\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => setInterval(() => {\r\n        this.setState({ datetime: new Date() })\r\n    }, updateInterval * 1000);\r\n\r\n    render = () => {\r\n        return (\r\n            <div className='container border-bottom'>\r\n                <Moment date={this.state.datetime} format='dddd, Do MMMM yyyy' className='medium bright' />\r\n                <div>\r\n                    <Moment className='large bright' date={this.state.datetime} format='HH:mm' />\r\n                    <span className=\"text-fade\">\r\n                        <Moment className='medium normal align-top' date={this.state.datetime} format='ss' />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","interface IProps {\r\n    currentTemp?: Number\r\n    feelsLikeTemp?: Number\r\n}\r\n\r\nexport default function currentWeather(props: IProps) {\r\n    return (\r\n        <div className=\"container border-bottom\">\r\n            <div className=\"medium bright\">Edinburgh, GB</div>\r\n            <div className=\"large bright\">{props.currentTemp}°C</div>\r\n            <div className=\"small\">Feels like {props.feelsLikeTemp}°C</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\ninterface IProps {\r\n    iconCode: String\r\n}\r\n\r\nexport default function weatherIcon(props: IProps) {\r\n    let url = `http://openweathermap.org/img/wn/${props.iconCode}@2x.png`;\r\n    return (\r\n        <img className='icon greyscale' src={url} alt=\"\" />\r\n    )\r\n}\r\n","import Icon from './weatherIcon';\r\n\r\ninterface IProps {\r\n    name: String\r\n    icon: String\r\n    temp: Number\r\n    showTemp: Boolean\r\n}\r\n\r\nexport default function forecastDay(props: IProps) {\r\n    return (\r\n        <div className=\"day\">\r\n            { props.showTemp === true &&\r\n                <span className='temp align-center bold' style={{ display: props.showTemp ? 'block' : 'none' }}>\r\n                    {props.temp}\r\n                </span>\r\n            }\r\n            { props.showTemp === false &&\r\n                   <Icon iconCode={props.icon} />\r\n            }\r\n            <span className=\"title\">\r\n                {props.name}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Day from './day';\r\nimport DayData from './dayData';\r\n\r\ninterface IProps {\r\n    days?: Array<DayData>\r\n}\r\n\r\ninterface IState {\r\n    showForecastTemps: Boolean\r\n}\r\n\r\nconst dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nexport default class forecastWeather extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            showForecastTemps: false\r\n        }\r\n    }\r\n\r\n    showTemps = () => this.setState({ showForecastTemps: true });\r\n    hideTemps = () => this.setState({ showForecastTemps: false });\r\n\r\n    render = () => (\r\n        <div className={`container forecast ${this.state.showForecastTemps ? 'shadow' : ''}`} onPointerEnter={this.showTemps} onPointerLeave={this.hideTemps}>\r\n            {\r\n                this.props.days?.map((day, index) => \r\n\r\n                    <Day key={index} name={dayNames[day.date.getDay()]} icon={day.icon} temp={day.temp} showTemp={this.state.showForecastTemps} />\r\n\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","export default class Day {\r\n    constructor(date: Date, temp: Number, icon: String) {\r\n        this.date = date;\r\n        this.temp = temp;\r\n        this.icon = icon;\r\n    }\r\n    date: Date\r\n    temp: Number\r\n    icon: String\r\n}","import { Component } from \"react\";\r\nimport CurrentWeather from './current';\r\nimport Forecast from './forecast';\r\nimport DayData from './dayData';\r\n\r\ninterface IProps { }\r\ninterface IState {\r\n    loading: Boolean,\r\n    currentTemp?: Number,\r\n    feelsLike?: Number\r\n    forecast?: Array<DayData>\r\n}\r\n\r\nconst {\r\n    REACT_APP_LOCATION_LAT,\r\n    REACT_APP_LOCATION_LON,\r\n    REACT_APP_WEATHER_API_KEY\r\n} = process.env;\r\n\r\nconst requestUrl = 'https://api.openweathermap.org/data/2.5/onecall?'\r\n    + `lat=${REACT_APP_LOCATION_LAT}`\r\n    + `&lon=${REACT_APP_LOCATION_LON}`\r\n    + `&appid=${REACT_APP_WEATHER_API_KEY}`\r\n    + `&exclude=\"current,minutely,hourly,alerts`\r\n    + `&units=metric`;\r\n\r\nexport default class Weather extends Component<IProps, IState>{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await fetch(requestUrl)\r\n            .then(response => response.json())\r\n            .then(json => this.setState({\r\n                currentTemp: this.roundToOnePlace(json.current.temp),\r\n                feelsLike: this.roundToOnePlace(json.current.feels_like),\r\n                forecast: this.parseForecast(json),\r\n                loading: false\r\n            }));\r\n    }\r\n\r\n    parseForecast = (json: any) => {\r\n        const numDaysToForecast = 5;\r\n        return json.daily\r\n            .slice(1, numDaysToForecast + 1)\r\n            .map((day: any) => new DayData(\r\n                new Date(day.dt * 1000),\r\n                this.roundToOnePlace(day.temp.day),\r\n                day.weather[0].icon\r\n            ));\r\n    }\r\n\r\n    roundToOnePlace = (value: number) => Math.round(value * 10) / 10;\r\n\r\n    render = () => {\r\n        if (this.state.loading) {\r\n            return (\r\n                <div>Loading</div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <CurrentWeather currentTemp={this.state.currentTemp} feelsLikeTemp={this.state.feelsLike} />\r\n                    <Forecast days={this.state.forecast} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import { Background, Clock } from './components/home/index';\nimport Weather from './components/weather';\n\nimport './styles/App.scss';\nimport './fonts/roboto.css';\n\nfunction App() {\n  return (\n    <div>\n      <Background/>\n      <Clock/>\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}