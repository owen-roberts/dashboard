{"version":3,"sources":["components/background.tsx","components/clock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["background","props","componentDidMount","setInterval","setState","image","getImageForHour","Date","getHours","console","log","intervalSeconds","state","hour","className","this","Component","Clock","datetime","updateInterval","render","date","format","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4QAuDeA,EA/Cf,kDACI,WAAYC,GAAgB,IAAD,8BACvB,cAAMA,IAiCVC,kBAAoB,kBAAMC,aAAY,WAClC,EAAKC,SAAS,CAAEC,MAAO,EAAKC,iBAAgB,IAAIC,MAAOC,cACvDC,QAAQC,IAAI,8BACbC,MAnCC,EAAKC,MAAQ,CAAEP,MAAO,EAAKC,iBAAgB,IAAIC,MAAOC,aAF/B,EAD/B,mDAMI,SAAgBK,GACZ,QAAQ,GACJ,KAAMA,GAAQ,IAAMA,GAAQ,EACxB,MAAO,aACX,KAAMA,GAAQ,GACV,MAAO,YACX,KAAMA,GAAQ,GACV,MAAO,cACX,KAAMA,GAAQ,GACV,MAAO,eACX,KAAMA,GAAQ,GACV,MAAO,cACX,KAAMA,GAAQ,GACV,MAAO,gBACX,KAAMA,GAAQ,GACV,MAAO,iBACX,KAAMA,GAAQ,GACV,MAAO,gBACX,KAAMA,GAAQ,GACV,MAAO,kBACX,KAAMA,GAAQ,EACV,MAAO,eACX,KAAMA,GAAQ,EACV,MAAO,cACX,QACI,MAAO,mBA/BvB,oBAwCI,WACI,OACI,qBAAKC,UAAS,qBAAgBC,KAAKH,MAAMP,aA1CrD,GAAgCW,a,gBCCXC,E,kDACjB,WAAYhB,GAAe,IAAD,8BACtB,cAAMA,IAMVC,kBAAoB,kBAAMC,aAAY,WAClC,EAAKC,SAAS,CAAEc,SAAU,IAAIX,SAC/BY,MATuB,EAW1BC,OAAS,WACL,OACG,sBAAKN,UAAU,QAAf,UACK,cAAC,IAAD,CAAQO,KAAM,EAAKT,MAAMM,SAAUI,OAAO,qBAAqBR,UAAU,kBACzE,gCACI,cAAC,IAAD,CAAQA,UAAU,eAAeO,KAAM,EAAKT,MAAMM,SAAUI,OAAO,UACnE,sBAAMR,UAAU,YAAhB,SACI,cAAC,IAAD,CAAQA,UAAU,0BAA0BO,KAAM,EAAKT,MAAMM,SAAUI,OAAO,gBAhB9F,EAAKV,MAAQ,CACTM,SAAU,IAAIX,MAHI,E,UADKS,a,YCMpBO,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASb,OACP,cAAC,IAAMc,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.19fe5fd4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\ninterface IProps { }\r\ninterface IState {\r\n    image: string\r\n}\r\n\r\nconst intervalSeconds = 60;\r\n\r\nexport class background extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { image: this.getImageForHour(new Date().getHours()) };\r\n    }\r\n\r\n    getImageForHour(hour:number){\r\n        switch (true) {\r\n            case (hour >= 23 && hour <= 4):\r\n                return 'late-night';\r\n            case (hour >= 22):\r\n                return 'mid-night';\r\n            case (hour >= 21):\r\n                return 'early-night';\r\n            case (hour >= 19):\r\n                return 'late-evening';\r\n            case (hour >= 16):\r\n                return 'mid-evening';\r\n            case (hour >= 15):\r\n                return 'early-evening';\r\n            case (hour >= 13):\r\n                return 'late-afternoon';\r\n            case (hour >= 12):\r\n                return 'mid-afternoon';\r\n            case (hour >= 10):\r\n                return 'early-afternoon';\r\n            case (hour >= 7):\r\n                return 'late-morning';\r\n            case (hour >= 5):\r\n                return 'mid-morning'; \r\n            default:\r\n                return 'early-morning';\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => setInterval(() => {\r\n        this.setState({ image: this.getImageForHour(new Date().getHours()) })\r\n        console.log(\"Updated background image\");\r\n    }, intervalSeconds * 1000);\r\n\r\n    render() {\r\n        return (\r\n            <div className={`background ${this.state.image}`}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default background\r\n","import React, { Component } from 'react'\r\nimport Moment from 'react-moment';\r\ninterface IProps {}\r\ninterface IState {\r\n    datetime : Date\r\n}\r\n\r\nconst updateInterval = 1;\r\n\r\nexport default class Clock extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n        this.state = {\r\n            datetime: new Date()\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => setInterval(() => {\r\n        this.setState({ datetime: new Date() })\r\n    }, updateInterval * 1000);\r\n\r\n    render = () => {\r\n        return (\r\n           <div className='clock'>\r\n                <Moment date={this.state.datetime} format='dddd, Do MMMM yyyy' className='medium bright'/>\r\n                <div>\r\n                    <Moment className='large bright' date={this.state.datetime} format='HH:mm'/>\r\n                    <span className=\"text-fade\">\r\n                        <Moment className='medium normal align-top' date={this.state.datetime} format='ss'/>\r\n                    </span>\r\n                </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Background from './components/background';\nimport Clock from './components/clock';\nimport './App.css';\nimport './fonts/roboto.css';\n\nfunction App() {\n  return (\n    <div>\n      <Background/>\n      <Clock/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}